%% calculation of the FRF a SDOF system excited using a shaker with random noise and chirp
clear all 
%% Parameters
%structure
m = 1;                              % mass           
k=10000;                            % stifness  
z = 0.01; c = 2*z*sqrt(m*k);        % damping 
wn=sqrt(k/m); wd=sqrt(1-z^2)*wn;    % natural frequency
SNRf=20;SNRx=100;                   % added noise SNRs

%shaker
ms = 0.1;                           % mass  
ws=2*pi*10;                         % natural frequency (rad/s)
ks=ws^2*ms;                         % stiffness
zs=0.1; cs=2*zs*sqrt(ms*ks);        % damping

%% Random force signal
fs=2000;                            % sampling frequency
dt=1/fs;T=120;t1=0:dt:T;            % [s]
f = randn(length(t1),1);            % random force signal 
N=length(f);TT=N*dt;
t=0:dt:(length(f)-1)*dt;            % time vector

%% calculation of Frequency domain Quantities
Na = 32;                            % number of averages
nfft=round(N/Na);                   % number of points in the DFT
noverlap=round(nfft/2);             % number of points in the overlap
df=1/(nfft*dt);                     % frequency resolution
ff = 0:df:fs/2;                     % frequency vector
w=2*pi*ff;ft=ff;
[fe,xc,Ht]=calc(f,m,k,c,ms,ks,cs,w,wd,wn,z,t,fs);    % function to calculated forcec and displacement

Sfsfs=cpsd(f,f,hann(nfft),noverlap,nfft,fs);     % PSD of force generated by the shaker
Sff=cpsd(fe,fe,hann(nfft),noverlap,nfft,fs);     % PSD of force applied to the structure
Sxx=cpsd(xc,xc,hann(nfft),noverlap,nfft,fs);     % PSD of displacement response
H=tfestimate(fe,xc,hann(nfft),noverlap,nfft,fs); % FRF
coh=mscohere(fe,xc,hann(nfft),noverlap,nfft,fs); % coherence

plots(ft,ff,Sfsfs,Sff,Sxx,H,Ht,coh)              % function to plot the results
clear Sfsfs; clear Sff; clear Sxx; clear Sfx 
%% Chirp
T=5;t1=0:dt:T;                           % time vector  
f1=1;f2=300;                             % upper and lower frequencies
a=2*pi*(f2-f1)/(2*T); b=2*pi*f1;         % coefficients
fc=sin(a*t1.^2+b*t1);                    % chirp signal
f=[fc zeros(1,length(fc))];              % zero padded force signal
N= length(f);
t=0:dt:(N-1)*dt; Tm=max(t);

df=1/(N*dt);ft=0:df:fs/2;               % frequency vector
w=2*pi*ft;
[fe,xc,Ht]=calc(f,m,k,c,ms,ks,cs,w,wd,wn,z,t,fs);    % calculate displacement
%% frequency domain calculations
for n=1:16
fwn=awgn(fe,SNRf,'measured','dB');                 % add random noise
xwn=awgn(xc,SNRx,'measured','dB');                 % add random noise

Fs=fft(f)*dt; 
F=fft(fwn)*dt;                                     % fft of force
X=fft(xwn)*dt;                                     % fft of displacement
Sfsfs(n,:)=Fs.*conj(Fs)/Tm; 
Sff(n,:)=F.*conj(F)/Tm;                            % force PSD                     
Sxx(n,:)=X.*conj(X)/Tm;                            % displacement PSD             
Sfx(n,:)=X.*conj(F)/Tm;                            % CPSD fx
end

Sfsfs=mean(Sfsfs);Sff=mean(Sff);Sxx=mean(Sxx);Sfx=mean(Sfx); % averaging results
H=Sfx./Sff;                                        % FRF
coh=abs(Sfx).^2./(Sxx.*Sff);                       % coherence
 
ff=0:df:fs-df;                                     % frequency vector
plots(ft,ff,Sfsfs,Sff,Sxx,H,Ht,coh)                % function to plot the results

%% Functions
function [fe,xc,Ht]=calc(f,m,k,c,ms,ks,cs,w,wd,wn,z,t,fs);      % calculate applied force
%% applied force and theoretical FRF
K=k-w.^2*m+j*w*c;
Ks=ks-w.^2*ms+j*w*cs;
Fe=K./(K+Ks);
G=[Fe,fliplr(conj(Fe(1:length(Fe)-1)))];
g=fs*ifft(G);
Ht=1./K;                                 % theoretical FRF
fe = conv(real(g),f)/fs;                 % applied force   
fe = fe(1:length(f));                    % applied force 
%% Impulse response
h=1/(m*wd)*exp(-z*wn*t).*sin(wd*t); % IRF
%% Convolution
xc=conv(h,fe)/fs;                                   % displacement response   
xc=xc(1:length(fe));                 
end

function plots(ft,ff,Sfsfs,Sff,Sxx,H,Ht,coh)
%% Frequency domain plots
figure                                            % plot of the force PSD
semilogx(ff,10*log10(Sfsfs),'linewidth',4,'color',[0.2 0.2 0.2])
hold on
semilogx(ff,10*log10(Sff),'linewidth',4,'color',[0.6 0.6 0.6])
axis square; grid,axis([1,200,-50,-20])
xticks([1 10 100 1000])
set(gca,'fontsize',20)
xlabel('frequency (Hz)');
ylabel('force PSD (dB ref 1 N^2/Hz)');

figure                                          % plot of the displacement PSD
semilogx(ff,10*log10(Sxx),'linewidth',4,'color',[0.6 0.6 0.6])
axis square; grid; axis([1,200,-160,-70])
xticks([1 10 100 1000])
set(gca,'fontsize',20)
xlabel('frequency (Hz)');
ylabel('displ. PSD (dB ref 1 m^2/Hz)');

figure                                          % plot of the modulus of the FRF
semilogx(ff,20*log10(abs(H)),'linewidth',4,'color',[0.6 0.6 0.6])
hold on
semilogx(ft,20*log10(abs(Ht)),':k','linewidth',4)
axis square; grid; axis([1,200,-120,-40])
xticks([1 10 100 1000])
set(gca,'fontsize',20)
xlabel('frequency (Hz)');
ylabel('displ./force (dB ref 1 m/N)');

figure                                                    % plot of the phase
semilogx(ff,180/pi*unwrap(angle(H)),'linewidth',4,'color',[0.6 0.6 0.6])
hold on
semilogx(ft,180/pi*unwrap(angle(Ht)),':k','linewidth',4)
axis square; grid,axis([1,200,-200,0])
xticks([1 10 100 1000])
set(gca,'fontsize',20)
xlabel('frequency (Hz)');
ylabel('phase (degrees)');

figure                                % plot of the coherence
semilogx(ff,coh,'linewidth',4,'color',[0.6 0.6 0.6])
axis square; grid; axis([1,200,0,1.1])
xticks([1 10 100 1000])
yticks([0 0.2 0.4 0.6 0.8 1])
set(gca,'fontsize',20)
xlabel('frequency (Hz)');
ylabel('coherence');
end
